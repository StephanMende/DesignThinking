<?php
/**
 * Created by PhpStorm.
 * User: jonaskortum
 * Date: 02.11.16
 * Time: 12:15
 */

require_once("task_reminder_diagram.inc");

function task_reminder_menu()
{
    $items['gruppenaufgaben'] = array(
        'title' => 'Anzeige aller Gruppenaufgaben',
        'page callback' => 'task_reminder_get_content',
        'access callback' => 'user_is_logged_in',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['gruppentermine'] = array(
        'title' => 'Anzeige aller Gruppentermine',
        'page callback' => 'task_reminder_get_appointment_content',
        'access callback' => 'user_is_logged_in',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'task_reminder_show_appointments.inc'
    );

    $items['delete_appointment/%'] = array(
        'title' => 'Publications',
        'access callback' => 'user_is_logged_in',
        'page callback' => 'task_reminder_delete_appointment',
        'file' => 'task_reminder_show_appointments.inc'
    );

    return $items;
}

/*
 * Diese Funktion definiert einen Block, in dem die fälligen Aufgaben des aktuell angemeldeten Nutzers angezeigt werden
 */
function task_reminder_block_info()
{
    $blocks['task_reminder'] = array(
        'info' => t('Anstehende Aufgaben'),
    );
    return $blocks;
}


/*
 * Diese Funktion erzeugt einen Block, in dem die fälligen Aufgaben des aktuell angemeldeten Nutzers angezeigt werden
 */
function task_reminder_block_view($delta)
{

    global $base_url;
    $block = array();

    switch ($delta) {
        case 0:
            $block['subject'] = t('Anstehende Aufgaben');
            $block['content'] = "";

            //Die offenen Aufgaben des aktuell angemeldeten Users werden geladen
            $tasks = task_reminder_get_user_tasks();
            foreach ($tasks as $t) {

                $date = new DateTime($t->deadline);
                $deadline2 = $date->format('d.m.Y H:i');
                $block['content'] .= "<ul><li><a href='" . $base_url . "/gruppenaufgaben'>$t->short_description</a></li>$deadline2</ul>";
            }
            break;
    }
    return $block;
}

/*
 * Diese Funktion zeigt alle Aufgaben einer Gruppe in Form einer Tabelle an
 */
function task_reminder_get_content()
{
    global $base_url;

    //Eine Tabellenüberschrift wird erstellt
    $task_string = "<h2>offene Aufgaben der Gruppe</h2>";

    //Der Kopf der Tabelle mit allen offenen Aufgaben der Gruppe wird erstellt
    $task_string .= "<table><th>Kurzbezeichnung</th><th>zugehöriger Benutzer (Wer?)</th> <th> Aufgabe (Was?)</th> <th>Deadline (Wann?)</th><th>Priorität</th><th>Aktionen</th>";

    //Die Gruppenmitglieder des aktuell angemeldeten Nutzers werden geladen
    $group_tasks = task_reminder_get_participants_from_logged_in_user_group();

    //Alle offenen Aufgaben der Gruppe werden geladen
    $sql = "SELECT * FROM {task} WHERE done = 0 AND uid IN (" . $group_tasks . ") ORDER BY deadline";
    $task_result = db_query($sql);

    //Es wird über alle offenen Aufgaben iteriert
    foreach ($task_result as $task) {

        //Der Nutzer, dem die Aufgabe zugewiesen wurde, wird ermittelt und Vor- und Nachname geladen
        $user = user_load($task->uid);
        $username = $user->field_first_name['und'][0]['value'] . " " . $user->field_last_name['und'][0]['value'];

        //Die Deadline der Aufgabe wird ermittelt und für die Anzeige in der Tabelle konvertiert
        $date = new DateTime($task->deadline);
        $deadline = $date->format('d.m.Y H:i:s') . " Uhr";

        //Es wird eine neue Zeile in der Tabelle hinzugefügt
        $task_string = $task_string . "
        <tr>
            <td>$task->short_description</td>
            <td>$username</td><td>$task->task</td>
            <td>$deadline</td><td>$task->priority</td>
            <td><a href='" . $base_url . "/delete_task/$task->task_id/zqjvEz44Qx'>als erledigt markieren</a></td>
        </tr>";
    }

    //Die Tabelle wird geschlossen
    $task_string .= "</table>";
    $task_string .= "<br>";


    //Die Tabellenüberschrift der zweiten Tabelle wird erzeugt
    $task_string .= "<h2>erledigte Aufgaben der Gruppe</h2>";

    //Der Kopf der zweiten Tabelle mit allen erledigten Aufgaben der Gruppe wird erstellt
    $task_string .= "<table><th>Kurzbezeichnung</th><th>zugehöriger Benutzer (Wer?)</th> <th> Aufgabe (Was?)</th> <th>Deadline (Wann?)</th><th>Priorität</th>";

    //Alle erledigten Aufgaben der Gruppe werden geladen
    $sql = "SELECT * FROM {task} WHERE done = 1 AND uid IN (" . $group_tasks . ") ORDER BY deadline";
    $completed_tasks_result = db_query($sql);

    //Es wird über alle erledigten Aufgaben iteriert
    foreach ($completed_tasks_result as $completed_task) {

        //Der Nutzer, dem die Aufgabe zugewiesen wurde, wird ermittelt und Vor- und Nachname geladen
        $user = user_load($completed_task->uid);
        $username = $user->field_first_name['und'][0]['value'] . " " . $user->field_last_name['und'][0]['value'];

        //Die Deadline der Aufgabe wird ermittelt und für die Anzeige in der Tabelle konvertiert
        $date = new DateTime($completed_task->deadline);
        $deadline = $date->format('d.m.Y H:i:s') . " Uhr";

        //Es wird eine neue Zeile in der Tabelle hinzugefügt
        $task_string = $task_string . "
        <tr>
            <td>$completed_task->short_description</td>
            <td>$username</td><td>$completed_task->task</td>
            <td>$deadline</td><td>$completed_task->priority</td>
        </tr>";
    }

    //Die Tabelle wird geschlossen
    $task_string .= "</table>";
    $task_string .= "<br>";

    //Zusätzlich zu den Tabellen werden Statistiken geführt, die sowohl eine gesamte als auch eine personenbezogene
    //Übersicht über das Verhältnis von offenen und erledigten Aufgaben enthalten.
    $task_string .= task_reminder_create_pie_chart("Aufgabenübersicht der Gruppe", task_reminder_get_user_task_overview());

    //DIe Gruppenteilnehmer werden in ein Array geladen
    $group_tasks = explode(",", $group_tasks);

    //Für jeden Gruppenteilnehmer wird anschließend eine Statistik erstellt
    foreach ($group_tasks as $item) {

        //Das User-Element wird aus der Datenbank geladen
        $user = user_load($item);

        //Eine Überschrift des Diagramms wird erstellt
        $title = "Aufgabenübersicht von " . $user->name;

        //Das passende Diagramm wird erzeugt
        $task_string .= task_reminder_create_pie_chart($title, task_reminder_get_task_overview_per_user($item));
    }

    return $task_string;
}

/*
 * Diese Funktion lädt alle Aufgaben einer Gruppe aus der Datenbank und sortiert sie nach offenen und erledigten Aufgaben
 * in ein Array ein, welches zurückgegeben wird
 */
function task_reminder_get_user_task_overview()
{

    //Die Aufgaben der Gruppe werden aus der Datenbank geladen
    $users = task_reminder_get_participants_from_logged_in_user_group();
    $sql = "SELECT * FROM {task} WHERE uid IN (" . $users . ") ORDER BY deadline";
    $task_result = db_query($sql);

    //Counter für offene und erledigte Aufgaben
    $done = 0;
    $open = 0;

    //Es wird über alle Aufgaben iteriert
    foreach ($task_result as $task) {

        //Sollte die Aufgabe erledigt sein
        if ($task->done == 1) {
            $done++;

            //Sollte die Aufgabe noch offen sein
        } else {
            $open++;
        }
    }

    $task_array = array("offen" => $open, "erledigt" => $done);

    return $task_array;
}

/*
 * Diese Funktion lädt alle Aufgaben, die einer bestimmten Person zugeordnet wurden, aus der Datenbank und sortiert sie
 * in offene und erledigte Aufgaben auf und speichert sie in ein Array, welches zurückgegeben wird
 */
function task_reminder_get_task_overview_per_user($uid)
{
    //Die Aufgaben der Person werden aus der Datenbank geladen
    $sql = "SELECT * FROM {task} WHERE uid =  " . $uid . " ORDER BY deadline";
    $task_result = db_query($sql);

    //Counter für offene und erledigte Aufgaben
    $done = 0;
    $open = 0;

    //Es wird über alle Aufgaben iteriert
    foreach ($task_result as $res) {

        //Sollte die Aufgabe erledigt sein
        if ($res->done == 1) {
            $done++;

            //Sollte die Aufgabe noch offen sein
        } else {
            $open++;
        }
    }
    $array = array("offen" => $open, "erledigt" => $done);

    return $array;
}

/*
 * Diese Funktion lädt alle offenen Aufgaben des aktuell angemeldeten Nutzers aus der Datenbank
 */
function task_reminder_get_user_tasks()
{
    //Die User-ID wird ermittelt
    global $user;
    $user_id = $user->uid;

    //Die offenen Aufgaben des Nutzers werden geladen
    $sql = "SELECT * FROM {task} WHERE uid = $user_id AND done = 0 ORDER BY deadline";
    $result = db_query($sql);

    return $result;
}

/*
 * Diese Funktion ermittelt Daten für die Aufgabenstatistik, welche anschließend an eine Funktion übergeben werden,
 * die daraus ein Diagramm erstellt. Dieses HTML-Diagramm wird am Ende zurückgegeben
 */
function task_reminder_create_pie_chart($title, $value)
{

    //Hier werden die einzelnen Aufgabeneigenschaften (bspw. offen oder erledigt) für die späteren Labelsin ein
    //neues Array gepackt
    $task_properties = array_keys($value);

    //Diese Variable speichert die einzelnen Werte, die in der späteren Grafik zu sehen sein sollen. Für die richtige
    //Konvertierung muss die Variable mit einer eckigen Klammer beginnen
    $diagram_values = "[";

    //Für das korrekte Auslesen des Eigenschaften-Arrays wird diese Hilfsvariable benötigt
    $property_id = 0;

    //Für jede Eigenschaft wird geschaut, wie oft diese vorkommt
    foreach ($value as $item) {

        //Standardmäßig ist die Schriftfarbe schwarz
        $color = "black";
        if ($item == 0) {

            //Sollte diese Eigenschaft innerhalb der Aufgaben nicht vorkommen, soll das Label nicht angezeigt werden, daher
            //wird die Schriftfarbe aus weiß geändert
            $color = "white";
        }

        //Für die Beschriftung wird jeweils die Eigenschaft aus dem vorher erstellten Array gelesen und anschließend
        //die Anzahl in der entsprechenden Farbe festgelegt.
        $diagram_values .= '{"label":"' . $task_properties[$property_id] . '", "value":' . $item . ', "color":"' . $color . '"},';

        //Für die nächste Eigenschaft wird die Hilfsvariable um eins erhöht
        $property_id++;
    }

    //Zuletzt werden die Werte soweit konvertiert, dass sie von der Funktion, welche das Diagramm erstellt, korrekt+
    //ausgelesen werden können
    $diagram_values = substr($diagram_values, 0, -1);
    $diagram_values .= "];";

    //Anschließend wird das Diagramm gebaut
    $diagram = task_reminder_create_chart_for_tasks($diagram_values, $title);

    return $diagram;
}

/*
 * Diese Funktion ermittelt die Gruppenteilnehmer des aktuell angemeldeten Nutzers
 */
function task_reminder_get_participants_from_logged_in_user_group()
{
    //Die User-ID wird ermittelt
    $users = array();
    global $user;
    $user_id = $user->uid;

    //Die Gruppenteilnehmer des Users werden geladen
    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";
    $user_result = db_query($sql);

    foreach ($user_result as $u) {
        array_push($users, $u->uid);
    }

    $user_list = implode(',', $users);

    return $user_list;
}

<?php
/**
 * Created by PhpStorm.
 * User: kortum
 * Date: 03.11.2015
 * Time: 19:20
 */

require_once("statistiken_diagram.inc");

/**
 * Implements hook_menu().
 */
function statistiken_menu()
{
    $items['statistiken'] = array(
        'title' => 'Statistiken',
        'access callback' => 'user_is_logged_in',
        'page callback' => 'statistiken_get_diagrams',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/*
 * Diese Funktion baut alle nötigen Statistik-Diagramme und gibt den entsprechenden HTML-Code zurück
 */
function statistiken_get_diagrams()
{

    $diagram_string = "";

    $diagram_string .= statistiken_create_pie_chart("Anzahl durchgeführter Methoden Ihrer Gruppe", statistiken_method_overview_room());
    $diagram_string .= statistiken_create_pie_chart("Anzahl Methoden nach Phase", statistiken_method_overview_phase());
    $diagram_string .= statistiken_create_pie_chart("Top 5 genutzter Methoden", statistiken_method_ranking());
    $diagram_string .= statistiken_create_pie_chart("Top 5 Ihrer genutzten Methoden", statistiken_group_method_ranking());

    return $diagram_string;

}

/*
 * Diese Funktion erfasst alle Methoden, die die Gruppe durchgeführt haben und ordnet sie anhand des Raumes
 */
function statistiken_method_overview_room()
{

    $method_list = array();

    $preparation = array();
    $problem_room = array();
    $solution_room = array();
    $implementation_room = array();
    $project_management = array();


    //Gruppenmitglieder werden ermittelt
    $user_list = statistiken_get_group_participants_from_current_user();


    //Die Methodendurchführungen der Gruppe werden ermittelt
    $sql = "SELECT * FROM {method_execution} WHERE uid in (" . $user_list . ")";
    $method_execution_result = db_query($sql);

    //Die Methodendurchführungen werden nach dem entsprechenden Raum aufgeteilt und in einzelne Arrays gespeichert
    foreach ($method_execution_result as $method) {
        array_push($method_list, $method->name);
        switch ($method->room) {
            case 'Vorbereitung':
                array_push($preparation, $method);
                break;
            case 'Problemraum':
                array_push($problem_room, $method);
                break;
            case 'Lösungsraum':
                array_push($solution_room, $method);
                break;
            case 'Implementierungsraum':
                array_push($implementation_room, $method);
                break;
            case 'Projektmanagement':
                array_push($project_management, $method);
                break;
        }
    }

    $data_array = array(
        "Vorbereitung" => sizeof($preparation),
        "Problemraum" => sizeof($problem_room),
        "Lösungsraum" => sizeof($solution_room),
        "Implementierungsraum" => sizeof($implementation_room),
        "Projektmanagement" => sizeof($project_management));

    return $data_array;

}

/*
 * Diese Funktion erfasst alle verfügbaren Methoden innerhalb des Design-Thinking-Informationssytems und ordnet sie
 * anhand der Phase.
 */
function statistiken_method_overview_phase()
{

    //Die Methoden werden aus der Datenbank geladen
    $sql = "SELECT * FROM {node} as node INNER JOIN {field_data_field_phase} AS phase ON node.nid = phase.entity_id;";
    $method_result = db_query($sql);

    $divergent = array();
    $convergent = array();
    $preparation = array();
    $project_management = array();

    //Je nachdem, welche Phase der Methode zugeordnet wurde, wird diese in das entsprechende Array abgespeichert
    foreach ($method_result as $result) {
        if ($result->field_phase_target_id == 27) {
            array_push($divergent, $result);
        }
        if ($result->field_phase_target_id == 28) {
            array_push($convergent, $result);
        }
        if ($result->field_phase_target_id == 142) {
            array_push($preparation, $result);
        }
        if ($result->field_phase_target_id == 143) {
            array_push($project_management, $result);
        }
    }

    $data_array = array(
        "divergent" => sizeof($divergent),
        "konvergent" => sizeof($convergent),
        "Vorbereitung" => sizeof($preparation),
        "Projektmanagement" => sizeof($project_management));

    return $data_array;
}

/*
 * Diese Methode ermittelt, welche Methode von der Gruppe wie häufig genutzt wurde und gibt die fünf häufigsten zurück
 */
function statistiken_group_method_ranking()
{


    $method_name_array = array();
    $method_name_ranking = array();

    //Die Mitglieder der Gruppe werden ermittelt
    $participants = statistiken_get_group_participants_from_current_user();

    //Die durchgeführten Methoden der Gruppe werden ermittelt
    $sql = "SELECT * FROM {method_execution} WHERE uid in (" . $participants . ")";
    $method_result = db_query($sql);

    //Der Name jeder Methode wird in ein Array geschrieben
    foreach ($method_result as $name) {
        array_push($method_name_array, $name->name);
    }

    //Die Methodennamen innerhalb des Arrays werden gezählt.
    $counted_method_names = array_count_values($method_name_array);

    //Ein neues Array wird befüllt. In diesem Array werden die Häufigkeiten der genutzten Methoden zusammen mit
    //den Methodennamen der Größe nach absteigend geordnet gespeichert.
    foreach ($counted_method_names as $key => $value) {
        $method_name_ranking[] = array($value, $key);
    }

    rsort($method_name_ranking);

    //Je nachdem, wie viele Methoden insgesamt genutzt wurden, wird das Array, welches am Ende zurückgegeben wird,
    //befüllt
    switch (sizeof($method_name_ranking)) {
        case 0:
            $array = array();
            break;
        case 1:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0]);
            break;
        case 2:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0]);
            break;
        case 3:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0]);
            break;
        case 4:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0]);
            break;
        case 5:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0],
                $method_name_ranking[4][1] => $method_name_ranking[4][0]);
            break;
        default:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0],
                $method_name_ranking[4][1] => $method_name_ranking[4][0]);
            break;
    }

    return $array;

}


/*
 * Diese Methode ermittelt, welche Methode insgesamt wie häufig genutzt wurde und gibt die fünf häufigsten zurück
 */
function statistiken_method_ranking()
{

    $method_names = array();
    $method_name_ranking = array();

    //Alle Methodendurchführungen werden geladen
    $sql = "SELECT * FROM {method_execution}";
    $method_result = db_query($sql);

    //Der Name jeder Methode wird in ein Array gespeichert
    foreach ($method_result as $name) {
        array_push($method_names, $name->name);
    }

    //Die Methodennamen werden gezählt und die Häufigkeit der Größe nach absteigend sortiert
    $counted_method_names = array_count_values($method_names);
    foreach ($counted_method_names as $key => $value) {
        $method_name_ranking[] = array($value, $key);
    }

    rsort($method_name_ranking);

    //Je nachdem, wie viele Methoden insgesamt genutzt wurden, wird das Array, welches am Ende zurückgegeben wird,
    //befüllt
    switch (sizeof($method_name_ranking)) {
        case 0:
            $array = array();
            break;
        case 1:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0]);
            break;
        case 2:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0]);
            break;
        case 3:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0]);
            break;
        case 4:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0]);
            break;
        case 5:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0],
                $method_name_ranking[4][1] => $method_name_ranking[4][0]);
            break;
        default:
            $array = array(
                $method_name_ranking[0][1] => $method_name_ranking[0][0],
                $method_name_ranking[1][1] => $method_name_ranking[1][0],
                $method_name_ranking[2][1] => $method_name_ranking[2][0],
                $method_name_ranking[3][1] => $method_name_ranking[3][0],
                $method_name_ranking[4][1] => $method_name_ranking[4][0]);
            break;
    }

    return $array;
}

/*
 * Diese Funktion ermittelt den aktuell angemeldeten Benutzer und gibt ihn zusammen mit seinen Gruppenmitgliedern
 * zurück
 */
function statistiken_get_group_participants_from_current_user()
{
    $users = array();
    global $user;
    $user_id = $user->uid;


    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";
    $user_result = db_query($sql);

    foreach ($user_result as $u) {
        array_push($users, $u->uid);
    }

    $user_list = implode(',', $users);

    return $user_list;


}
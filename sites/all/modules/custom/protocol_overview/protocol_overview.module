<?php
/**
 * Created by PhpStorm.
 * User: kortum
 * Date: 03.11.2015
 * Time: 19:20
 */

require_once(realpath(".") . "/sites/all/libraries/dompdf-0.6.1/dompdf_config.inc.php");

require_once('protocol_overview_pdf_general_information.inc');

include('mpdf60/mpdf.php');

function protocol_overview_menu()
{
    $items['protokoll_uebersicht'] = array(
        'access callback' => 'user_is_logged_in',
        'page callback' => 'protocol_overview_show_protocol_overview',
    );

    $items['protokoll_pdf_erstellen/%'] = array(
        'access callback' => 'user_is_logged_in',
        'page callback' => 'create_protocol_pdf',
        'file' => 'protocol_overview_create_pdf.inc',
    );

    $items['show_total_protocol/%'] = array(
        'title' => 'Protokoll erstellen',
        'access callback' => 'user_is_logged_in',
        'page callback' => 'create_total_documentation',
        'file' => 'protocol_overview_create_pdf.inc',
    );

    return $items;
}

/*
 * Diese Funktion erstellt eine Übersicht über die bisher angelegten Protokolle einer Gruppe. Diese wird in Form
 * einer Tabelle angezeigt. Zusätzlich wird die Design-Thinking-Grafik mit dynamischen Punkten erstellt, wobei jeder
 * Punkt ein fertiges Protokoll repräsentiert.
 */
function protocol_overview_show_protocol_overview()
{
    global $base_url;

    //Benutzer der Gruppe werden geladen
    $users = protocol_overview_get_participants_from_logged_in_user_group();

    //Protokolle der Benutzer werden geladen
    $sql = "SELECT * FROM {protocol} WHERE uid IN ($users) AND finished = 1 ORDER BY date";
    $protocol_result = db_query($sql);

    //In dieses Array werden alle geladenen Protokolle abgespeichert
    $protocol_array = array();

    foreach ($protocol_result as $protocol) {
        array_push($protocol_array, $protocol);
    }

    /* Innerhalb dieses if-Blocks wird die Anzahl der anzuzeigenden Punkte ermittelt und analysiert, ob diese
     * auf die DT-Grafik passen. Sollte dies nicht der Fall sein, wird der vertikale Abstand zwischen zwei
     * Punkten verringert und erneut geprüft. Im Anschluss wird die Grafik mit den Punkten in eine Variable gespeichert
     */
    if (protocol_overview_get_height_from_dynamic_points($protocol_array, 40) > 820) {
        if (protocol_overview_get_height_from_dynamic_points($protocol_array, 38) > 820) {
            if (protocol_overview_get_height_from_dynamic_points($protocol_array, 36) > 820) {
                $dynamic_graphic = protocol_overview_create_dynamic_graphic($protocol_array, 34);
            } else {
                $dynamic_graphic = protocol_overview_create_dynamic_graphic($protocol_array, 36);
            }
        } else {
            $dynamic_graphic = protocol_overview_create_dynamic_graphic($protocol_array, 38);
        }
    } else {
        $dynamic_graphic = protocol_overview_create_dynamic_graphic($protocol_array, 40);
    }

    //Die dynamische Grafik wird dem String hinzugefügt, der am Ende der Funktion zurückgegeben wird
    $protocol_overview_string = $dynamic_graphic;

    //Der Kopf der Tabelle wird erzeugt
    $protocol_overview_string .= "
        <table>
            <th>Nr.</th>
            <th>Datum</th>
            <th>Methoden</th>
            <th>Fazit</th>
            <th>Raum</th>
            <th>Phase</th>
            <th>Aktionen</th>";

    global $user;

    $group = end($user->roles);
    $role_id = 0;
    $sql = "SELECT * FROM {role} WHERE name = '" . $group . "'";
    $result = db_query($sql);

    foreach ($result as $item) {
        $role_id = $item->rid;
    }

    //Es wird ein Link erzeugt, der eine vollständige Dokumentation erstellt. Dieser Link wird überhalb der Tabelle angezeigt
    $protocol_overview_string .= "<br><br><a href='" . $base_url . "/show_total_protocol/" . $role_id . "'>Das gesamte Dokument als PDF anzeigen (kann etwas dauern)</a>";

    //Hilfsvariable, welche die angezeigten Protokolle zählt
    $protocol_counter = 1;

    //Es wird über jedes Protokoll iteriert
    foreach ($protocol_array as $protocol) {

        //String-Variable, welche alle nötigen Attribute eines Protokolls aufnimmt und in die Tabelle einfügt
        $protocol_string = "";

        //Start- und Endzeitpunkt des Protokolls wird ermittelt
        $start_date = new DateTime($protocol->start_date);
        $end_date = new DateTime($protocol->end_date);
        $converted_start_date = $start_date->format('d.m.Y H:i');
        $converted_end_date = $end_date->format('d.m.Y H:i');

        //Lädt die zum Protokoll gehörenden Methodendurchführung
        $methods = protocol_overview_get_all_methods_from_protocol($protocol->protocol_id);

        //Falls Methoden zum Protokoll existieren
        if (sizeof($methods) > 0) {

            //Die Namen der Methoden werden in Form einer Aufzählung dargestellt
            $protocol_string .= '<ul>';

            foreach ($methods as $m) {
                $protocol_string .= "
                    <li>
                        <a href='" . $base_url . "/methodenanzeige/$m->method_execution_id/t8HVhPRlPZ'>$m->name</a>
                    </li>";
            }
            $protocol_string .= '</ul>';

            //Falls keine Methode durchgeführt wurde, wird dies in der Tabelle vermerkt
        } else {
            $protocol_string = "Keine Methoden durchgeführt";
        }

        //Fazit des Protokolls wird geladen
        $conclusion = $protocol->conclusion;

        //Falls kein Fazit existiert, wird dies in der Tabelle vermerkt
        if (!strcmp($conclusion, "")) {
            $conclusion = "Keine Bewertung als Freitext vorhanden";
        }

        //Zeile der Tabelle wird erstellt
        $protocol_overview_string = $protocol_overview_string . "
            <tr>
                <td>$protocol_counter</td>
                <td>$converted_start_date -<br>$converted_end_date</td>
                <td>$protocol_string</td><td>$conclusion</td>
                <td>$protocol->raum_end</td><td>$protocol->phase_end</td>
                <td>
                    <ul>
                        <li>
                            <a href='" . $base_url . "/protokollanzeige/$protocol->protocol_id'>anzeigen</a>
                        </li>
                        <li>
                            <a href='" . $base_url . "/protokoll_pdf_erstellen/$protocol->protocol_id'>pdf</a>
                        </li>
                    </ul>
                </td>
            </tr>";
        $protocol_counter = $protocol_counter + 1;
    }

    //Tabelle wird geschlossen
    $protocol_overview_string .= "</table>";

    return $protocol_overview_string;
}

/*
 * Diese Funktion liest alle Methodendurchführungen einer Gruppe zu einem Protokoll aus der Datenbank aus. Die ID des
 * Protokolls wird dabei als Parameter übergeben
 */
function protocol_overview_get_all_methods_from_protocol($protocol_id)
{
    //Variable, die alle Methoden des Protokolls abspeichert
    $methods = array();

    $sql = "SELECT * FROM {method_execution} WHERE protocol_id = $protocol_id";
    $method_result = db_query($sql);

    foreach ($method_result as $m) {
        array_push($methods, $m);
    }

    return $methods;
}

/*
 * Diese Funktion erstellt die Design-Thinking-Grafik mit den dynamischen Punkten. Dabei werden die Protokolle als
 * Parameter übergeben. Weiterhin wird ein Y-Wert übergeben, der den vertikalen Abstand der Punkte zueinander definiert
 */
function protocol_overview_create_dynamic_graphic($protocol_elements, $y_value)
{

    //Der Y-Wert wird aus dem Übergabeparameter ausgelesen
    $y_space = $y_value;

    /*
     * Für jedes Protokoll werden Name von Raum und Phase ermittelt und zusätzlich geschaut, ob es sich um eine
     * Vorbereitungsmethode oder Projektmanagementmethode handelt. Diese werden nicht in der Grafik angezeigt.
     */
    $protocol_room_phase = array();
    $protocols = $protocol_elements;
    foreach ($protocols as $protocol) {
        array_push($protocol_room_phase, $protocol->raum_end . " " . $protocol->phase_end);
    }

    //In dieses Array werden die dynamischen Punkte zusammen mit deren Verlinkungen gespeichert
    $dynamic_points = array();
    $dynamic_points['nodes'] = array();
    $dynamic_points['links'] = array();

    //Hilfsvariable, die die Durchläufe durch die Protokolle zählt
    $counter = 0;

    //Diese Variable speichert den Verlauf der Protokolle in Form von Zahlen ab. 1 == Problemraum divergent, 6 ==
    //Implementierungsraum konvergent
    $reference_array = array();

    //Feste x und y Werte für den ersten Punkt im divergenten Problemraum
    $y = 240;
    $x = 25;

    //Es wird über jedes Protokoll iteriert
    for ($i = 0; $i < sizeof($protocol_room_phase); $i++) {

        //Raum und Phase der Gruppe nach Ende des Protokolls
        $name = $protocol_room_phase[$i];

        switch ($name) {

            case 'Problemraum divergent':

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));

                    //Protokoll befindet sich in der ersten der sechs Prozessstufen
                    array_push($reference_array, "1");
                    $counter++;
                } else {

                    //Wenn das vorige Protokoll in gleichem Raum bzw. gleicher Phase befindet...
                    if ($reference_array[$counter - 1] <= 1) {
                        $x = $x + 40;
                        if ($x > 185) {
                            $x = 25;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));
                        array_push($reference_array, "1");
                        $counter++;

                        //Sollte sich das vorige Protokoll in einem späteren Prozessschritt befunden haben, wird eine neue
                        //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                    } else {
                        $y = $y + $y_space;
                        $x = 25;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));
                        array_push($reference_array, "1");
                        $counter++;
                    }
                }
                break;

            case 'Problemraum konvergent':

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {
                    $x = 245;
                    $y = 240;

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));

                    //Protokoll befindet sich in der zweiten der sechs Prozessstufen
                    array_push($reference_array, "2");
                    $counter++;
                } else {

                    //Sollte sich das vorige Protokoll in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                    if ($reference_array[$counter - 1] < 2) {
                        $x = 245;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                        array_push($reference_array, "2");
                        $counter++;

                        //Sollte sich das vorige Protokoll in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                        //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                    } else if ($reference_array[$counter - 1] == 2) {
                        $x = $x + 40;
                        if ($x > 405) {
                            $x = 245;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                        array_push($reference_array, "2");
                        $counter++;

                        //Sollte sich das vorige Protokoll in einem späteren Prozessschritt befunden haben, wird eine neue
                        //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                    } else if ($reference_array[$counter - 1] > 2) {
                        $x = 245;
                        $y = $y + $y_space;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                        array_push($reference_array, "2");
                        $counter++;
                    }
                }
                break;

            case 'Lösungsraum divergent':

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {
                    $x = 461;
                    $y = 240;

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));

                    //Protokoll befindet sich in der dritten der sechs Prozessstufen
                    array_push($reference_array, "3");
                    $counter++;
                } else {

                    //Sollte sich das vorige Protokoll in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                    if ($reference_array[$counter - 1] < 3) {
                        $x = 461;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                        array_push($reference_array, "3");
                        $counter++;

                        //Sollte sich das vorige Protokoll in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                        //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                    } else if ($reference_array[$counter - 1] == 3) {
                        $x = $x + 40;
                        if ($x > 622) {
                            $x = 461;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                        array_push($reference_array, "3");
                        $counter++;

                        //Sollte sich das vorige Protokoll in einem späteren Prozessschritt befunden haben, wird eine neue
                        //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                    } else if ($reference_array[$counter - 1] > 3) {
                        $x = 461;
                        $y = $y + $y_space;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                        array_push($reference_array, "3");
                        $counter++;
                    }
                }
                break;

            case "Lösungsraum konvergent":

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {
                    $x = 677;
                    $y = 240;

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));

                    //Protokoll befindet sich in der vierten der sechs Prozessstufen
                    array_push($reference_array, "4");
                    $counter++;
                } else {

                    //Sollte sich das vorige Protokoll in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                    if ($reference_array[$counter - 1] < 4) {
                        $x = 677;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                        array_push($reference_array, "4");
                        $counter++;

                        //Sollte sich das vorige Protokoll in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                        //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                    } else if ($reference_array[$counter - 1] == 4) {
                        $x = $x + 40;
                        if ($x > 854) {
                            $x = 677;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                        array_push($reference_array, "4");
                        $counter++;

                        //Sollte sich das vorige Protokoll in einem späteren Prozessschritt befunden haben, wird eine neue
                        //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                    } else if ($reference_array[$counter - 1] > 4) {
                        $x = 677;
                        $y = $y + $y_space;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                        array_push($reference_array, "4");
                        $counter++;
                    }
                }
                break;

            case "Implementierungsraum divergent":

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {
                    $x = 891;
                    $y = 240;

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));

                    //Protokoll befindet sich in der fünften der sechs Prozessstufen
                    array_push($reference_array, "5");
                    $counter++;
                } else {

                    //Sollte sich das vorige Protokoll in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                    if ($reference_array[$counter - 1] < 5) {
                        $x = 891;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                        array_push($reference_array, "5");
                        $counter++;

                        //Sollte sich das vorige Protokoll in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                        //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                    } else if ($reference_array[$counter - 1] == 5) {
                        $x = $x + 40;
                        if ($x > 1051) {
                            $x = 891;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                        array_push($reference_array, "5");
                        $counter++;

                        //Sollte sich das vorige Protokoll in einem späteren Prozessschritt befunden haben, wird eine neue
                        //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                    } else if ($reference_array[$counter - 1] > 5) {
                        $x = 891;
                        $y = $y + $y_space;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                        array_push($reference_array, "5");
                        $counter++;
                    }
                }
                break;

            case "Implementierungsraum konvergent":

                //Sollte es der erste Punkt der Grafik sein:
                if ($counter == 0) {
                    $x = 1111;
                    $y = 240;

                    //Der erste Punkt wird in das zugehörige Array gespeichert
                    array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));

                    //Protokoll befindet sich in der sechsten der sechs Prozessstufen
                    array_push($reference_array, "6");
                    $counter++;

                } else {

                    //Sollte sich das vorige Protokoll in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                    if ($reference_array[$counter - 1] < 6) {
                        $x = 1111;
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));
                        array_push($reference_array, "6");
                        $counter++;

                        //Sollte sich das vorige Protokoll in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                        //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                    } else if ($reference_array[$counter - 1] == 6) {
                        $x = $x + 40;
                        if ($x > 1271) {
                            $x = 1111;
                            $y = $y + $y_space;
                        }
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));
                        array_push($reference_array, "6");
                        $counter++;
                    }
                }
                break;
        }

        //Die Verlinkungen der Punkte werden erstellt
        if ($i > 0) {
            array_push($dynamic_points['links'], array('source' => $i - 1, 'target' => $i));
        }
    }

    dsm($dynamic_points);
    $chart = array(
        'id' => 'visualization',
        'type' => 'gantt',
        'data' => ($dynamic_points),
    );

    $d3_chart = d3_draw($chart);


    return $d3_chart;
}

/*
 * Diese Funktion bestimmt den vertikalen Abstand der dynamischen Punkte zueinander innerhalb der Design-Thinking-Grafik.
 * Sollten die Punkte über die Grafik hinaus ragen, wird der vertikale Abstand verkleinert.
 */
function protocol_overview_get_height_from_dynamic_points($protocol_array, $y_value_reference)
{

    $protocol_room_phase = array();

    //Die Protokolle werden aus dem Übergabeparameter geladen
    $protocols = $protocol_array;

    //Aus jedem Protokoll wird der Raum und die Phase der Gruppe nach Beendigung des Protokolls ausgelesen, um einen
    //Weg von Protokoll zu Protokoll erkennen zu können
    foreach ($protocols as $protocol) {
        array_push($protocol_room_phase, $protocol->raum_end . " " . $protocol->phase_end);


    }

    //In dieses Array wird die Reihenfolge der Protokolle in Form von Zahlen gespeichert.
    $number_reference_array = array();

    foreach ($protocol_room_phase as $protocol) {
        switch ($protocol) {
            case "Problemraum divergent":
                array_push($number_reference_array, 1);
                break;
            case "Problemraum konvergent":
                array_push($number_reference_array, 2);
                break;
            case "Lösungsraum divergent":
                array_push($number_reference_array, 3);
                break;
            case "Lösungsraum konvergent":
                array_push($number_reference_array, 4);
                break;
            case "Implementierungsraum divergent":
                array_push($number_reference_array, 5);
                break;
            case "Implementierungsraum konvergent";
                array_push($number_reference_array, 6);
                break;
        }
    }

    $y_value = 240;
    $counter = 1;

    //Es wird über das Protokoll-Zahlen-Array iteriert, um am Ende den voraussichtlichen Y-Wert des letzten Punktes
    //zu erhalten
    for ($i = 0; $i < sizeof($number_reference_array) - 1; $i++) {

        if ($number_reference_array[$i + 1] > $number_reference_array[$i]) {
            $counter = 1;
        } else if ($number_reference_array[$i + 1] == $number_reference_array[$i]) {
            $counter++;
            if ($counter == 6) {
                $y_value = $y_value + $y_value_reference;
                $counter = 1;
            }
        } else {
            $counter = 1;
            $y_value = $y_value + $y_value_reference;
        }
    }

    return $y_value;

}

/*
 * Diese Funktin lädt alle Gruppenmitglieder des aktuell angemeldeten Nutzers aus der Datenbank
 */
function protocol_overview_get_participants_from_logged_in_user_group()
{
    $users = array();
    global $user;
    $user_id = $user->uid;

    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";
    $user_result = db_query($sql);

    foreach ($user_result as $pro) {
        array_push($users, $pro->uid);
    }

    $list = implode(',', $users);

    return $list;
}












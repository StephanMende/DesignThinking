<?php
/**
 * Created by PhpStorm.
 * User: jonaskortum
 * Date: 08.12.16
 * Time: 07:58
 */

function method_overview_menu()
{
    $items['methoden_uebersicht'] = array(
        'title' => 'Methodenübersicht',
        'page callback' => 'method_overview_show_methods',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['change_method_execution/%'] = array(
        'title' => 'Methodendurchführung ändern',
        'page arguments' => array('method_overview_change_method_form'),
        'access arguments' => array('access content'),
        'page callback' => 'drupal_get_form',
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/*
 * Diese Funktion baut die Übersicht über die durchgeführten Methoden als Tabelle plus die dazugehörige Design-Thinking-
 * Grafik
 */
function method_overview_change_method_form($form, &$form_submit)
{

    //Die übergebene ID der Methode
    $method_id = arg(1);

    //Anhand der ID wird die aktuelle Methode aus der Datenbank geladen
    $current_method = method_overview_get_current_method_for_method_overview($method_id);

    //Für das Dropdown-Menü werden alle verfügbaren Methoden aus der Datenbank geladen
    $methods = method_overview_get_available_methods_for_change();

    //Array-Variable, in der alle Räume gespeichert sind für die Auswahl der Position der Gruppe nach Beendigung
    //der Methode
    $types_room = array("Problemraum" => "Problemraum", "Lösungsraum" => "Lösungsraum", "Implementierungsraum" => "Implementierungsraum");

    //Array-Variable, in der alle Phasn gespeichert sind für die Auswahl der Position der Gruppe nach Beendigung
    //der Methode
    $types_phase = array("konvergent" => "konvergent", "divergent" => "divergent");

    //Alle zur Methodendurchführung hochgeladenen Dateien werden aus der Datenbank geladen
    $method_execution_data = method_overview_get_all_images($current_method->method_execution_id);

    $form["method"]["choose_method"] = array(
        "#type" => "select",
        "#title" => t("Bitte passende Methode aussuchen"),
        "#options" => $methods,
        "#default_value" => $current_method->name,
        "#description" => t("Wähle Methode."),
    );

    $form["phase"]["choose_phase"] = array(
        "#type" => "select",
        "#title" => t("Bitte passende Phase aussuchen"),
        "#default_value" => $current_method->phase,
        "#options" => array(
            "konvergent" => t("konvergent"),
            "divergent" => t("divergent"),
        ),
        "#description" => t("Wähle Phase."),
    );

    $form["room"]["choose_room"] = array(
        "#type" => "select",
        "#title" => t("Bitte passenden Raum aussuchen"),
        "#default_value" => $current_method->room,
        "#options" => array(
            "Problemraum" => t("Problemraum"),
            "Lösungsraum" => t("Lösungsraum"),
            "Implementierungsraum" => t("Implementierungsraum"),
        ),
        "#description" => t("Wähle Raum."),
    );

    $form['reason'] = array(
        '#title' => t('Grund der Methodenwahl'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->reason,
        '#type' => 'textarea'
    );

    $form['goal'] = array(
        '#title' => t('Ziel der Methode'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->goal,
        '#type' => 'textarea'
    );

    $form['execution'] = array(
        '#title' => t('Ausführung der Methode'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->execution,
        '#type' => 'textarea'
    );

    $form['rating_star'] = array(
        '#type' => 'fivestar',
        '#stars' => 5,
        '#default_value' => $current_method->rating,
        '#title' => t('Bewertung der Methode.'),
    );

    $form['rating'] = array(
        '#title' => t('Bewertung der Ergebnisse'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->evaluation,
        '#type' => 'textarea'
    );

    $form["raum_end"]["select_raum_end"] = array(
        "#type" => "select",
        "#title" => t("Raum am Ende des Treffens (In welchem Raum befindet ihr euch nach der Methodendurchführung?)"),
        "#options" => $types_room,
        '#default_value' => $current_method->raum_end,
    );

    $form["phase3"]["select_phase_end"] = array(
        "#type" => "select",
        "#title" => t("Phase am Ende des Treffens (In welcher Phase befindet ihr euch nach der Methodendurchführung?)"),
        "#options" => $types_phase,
        '#default_value' => $current_method->phase_end,
    );

    $form['file'] = array(
        '#type' => 'file',
        '#name' => 'files[]',
        '#title' => t('Dateiupload'),
        '#attributes' => array('multiple' => 'multiple'),
    );

    $form['form_item'] = array(
        '#type' => 'markup',
        '#prefix' => $method_execution_data,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Speichern',
        '#submit' => array('method_overview_update_method_execution_from_method_overview')
    );

    $form['delete'] = array(
        '#type' => 'submit',
        '#value' => 'Löschen',
        '#submit' => array('method_overview_delete_method_execution_in_method_overview')
    );

    $form['back'] = array(
        '#type' => 'submit',
        '#value' => 'Zurück zur Methodenübersicht',
        '#submit' => array('method_overview_back_to_method_overview')
    );


    return $form;
}

/*
* Diese Funktion lädt alle Attribute einer Methode aus der Datenbank. Die ID der Methode wird als Parameter
* übergeben
*/
function method_overview_get_current_method_for_method_overview($id)
{

    $method = "";
    $sql = "SELECT * FROM {method_execution} WHERE method_execution_id = $id";
    $method_execution_result = db_query($sql);

    //Die gefundene Methode wird in eine Variable gespeichert, die am Ende zurückgegeben wird
    foreach ($method_execution_result as $m) {
        $method = $m;
    }
    return $method;
}

/*
 *
 */
function method_overview_show_methods()
{
    global $base_url;

    //Alle relevanten methoden werden geladen
    $methods = method_overview_get_relevant_methods_for_overview(true);

    //dynamische Grafik wird erstellt
    $method_string = method_overview_build_dynamic_graphic(method_overview_get_relevant_methods_for_overview(false), 40);

    //Kopf der Tabelle wird erstellt
    $method_string .= "
        <table>
            <th>Nr.</th>
            <th>Datum</th>
            <th>Methodenname</th>
            <th>Raum der Methode</th>
            <th>Phase der Methode</th>
            <th>Bewertung</th>
            <th>Raum der Gruppe</th>
            <th>Phase der Gruppe</th>
            <th>Aktionen</th>";

    //Helfer-ID zur korrekten Zählweise der Methoden
    $method_counter = 1;

    //Über jede Methode wird iteriert
    foreach ($methods as $r) {

        //Das passende Image der Bewertung der Methode wird geladen
        $image = "";
        if ($r->rating == 20) {
            $image = "one.png";
        } else if ($r->rating == 40) {
            $image = "two.png";
        } else if ($r->rating == 60) {
            $image = "three.png";
        } else if ($r->rating == 80) {
            $image = "four.png";
        } else if ($r->rating == 100) {
            $image = "five.png";
        }

        //Datum der Erstellung wird ermittelt
        $creation_date = "";
        $date = new DateTime($r->creation_date);
        $creation_date .= $date->format('d.m.Y');

        //Weitere Attribute der Methode werden geladen
        $rating = $r->evaluation;
        $method_id = $r->method_execution_id;
        $protocol_id = $r->protocol_id;

        if (!strcmp($rating, "")) {
            $rating = "Keine Bewertung als Freitext vorhanden";
        }

        //Die Tabelle wird befüllt
        $method_string = $method_string . "
        <tr>
            <td>" . $method_counter . ".</td><td>" . $creation_date . "</td>
            <td><a href='methodenanzeige/$method_id/zqjvEz44Qx'>$r->name</a></td>
            <td>$r->room</td>
            <td>$r->phase</td>
            <td><img src=" . $image . " height=\"100\" width=\"100\"></td>
            <td>$r->raum_end</td>
            <td>$r->phase_end</td>
            <td>
                <ul>
                    <li><a href='" . $base_url . "/protokoll_methode_aendern/" . $method_id . "/zqjvEz44Qx' >bearbeiten</a></li>
                    <li><a href='" . $base_url . "/protokollanzeige/" . $protocol_id . "' >Link zum Protokoll</a></li>
                </ul>
            </td>
        </tr>";
        $method_counter++;

    }

    //Tabelle wird geschlossen
    $method_string .= "</table>";

    //Grafik und Tabelle werden zurückgegeben
    return $method_string;
}


function method_overview_get_all_images($id)
{
    global $base_url;

    //Die Bezeichnungen der Daten werden aus der Datenbank gelesen
    $sql = "SELECT * FROM {method_execution_data} WHERE method_execution_id = " . $id;
    $data_result = db_query($sql);

    //Dieser String wird zurückgegeben. Er enthält alle Dateien als HTML-Code
    $data_string = "";

    //es wird über alle Dateien iteriert
    foreach ($data_result as $data) {

        //Diese Datentypen sind für eine Anzeige erlaubt. Alle anderen Datentypen werden als Link dargestellt
        $allowed = array('gif', 'png', 'jpg');

        //Die Dateiendung der Datei wird ermittelt
        $filename = $data->path;
        $basename = preg_replace('/^.+[\\\\\\/]/', '', $filename);
        $ext = pathinfo($filename, PATHINFO_EXTENSION);

        //Sofern die Dateiendung erlaubt ist, kann es angezeigt werden
        if (in_array($ext, $allowed)) {
            $path = "/$base_url/sites/default/files/" . $data->path;
            $data_string .= "<img style=\"max-width:540px;\" src='" . $path . "'alt=Kein_Bild_vorhanden><br><b>$basename</b><a href='/$base_url/delete_file/$id/$basename/zqjvEz44Qx'\">&nbsp;&nbsp;Löschen</a><br><br>";
        } else {
            $data_string .= '<a href="/' . $base_url . '/sites/default/files/' . $data->path . '" target="_blank">' . $basename . '</a><a href="/delete_file/' . $id . '/' . $basename . '/zqjvEz44Qx">&nbsp;&nbsp;Löschen</a><br><br>';
        }
    }

    //Bilder und andere hochgeladenen Daten werden zurückgegeben
    return $data_string;
}


/*
* Diese Methode ermittelt alle Methoden, die von der Gruppe durchgeführt wurden.
 */
function method_overview_get_relevant_methods_for_overview($allMethods)
{

    $methods_from_finished_protocols = array();

    //Teilnehmer der Gruppe werden ermittelt
    $participants = method_overview_get_participants_for_methods();

    $sql = "SELECT * FROM {method_execution} WHERE uid in (" . $participants . ") AND room != 'Vorbereitung' ORDER BY creation_date";
    $result = db_query($sql);

    foreach ($result as $item) {
        $protocol = method_overview_get_protocol_element_by_id($item->protocol_id);

        if ($protocol->finished) {
            array_push($methods_from_finished_protocols, $item);
        }
    }

    return $methods_from_finished_protocols;
}


/*
 * Diese Funktion lädt alle verfügbaren Methoden aus der Datenbank
 */
function method_overview_get_available_methods_for_change()
{
    $method_names = array();
    $sql = "SELECT title, nid FROM {node} WHERE type = 'methode' ORDER BY title";
    $node_result = db_query($sql);

    foreach ($node_result as $node) {
        $method_names[$node->title] = $node->title;
    }
    return $method_names;
}

/*
 * Diese Methode ermittelt die Teilnehmer der Gruppe des angemeldeten Users und gibt sie als Stringliste zurück.
 */
function method_overview_get_participants_for_methods()
{
    //User-ID wird ermittelt
    $users = array();
    global $user;
    $user_id = $user->uid;


    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";
    $user_id_result = db_query($sql);

    foreach ($user_id_result as $u) {
        array_push($users, $u->uid);
    }

    //User-Array wird in einen String geladen, die Namen werden durch Komma getrennt
    $user_list = implode(',', $users);

    return $user_list;
}

/*
 * Diese Methode löscht eine vorhandene Methodendurchführung aus der Datenbank. Gleichzeitig werden alle damit
 * verbundenen hochgeladenenen Dateien aus der Datenbank gelöscht
 */
function method_overview_delete_method_execution_in_method_overview()
{
    //Die ID der Methode wird übergeben
    $method_id = arg(1);

    //Die Methodendurchführung mit allen Attributen wird gelöscht
    $method_sql = "DELETE FROM {method_execution} WHERE method_execution_id = $method_id";
    db_query($method_sql);

    //Die hochgeladenen Dateien zur Methodendurchfühung werden gelöscht
    $data_sql = "DELETE FROM {method_execution_data} WHERE method_execution_id = $method_id";
    db_query($data_sql);

    drupal_set_message("Objekt wurde gelöscht");
    drupal_goto('/method_overview');

}

/*
 * Diese Funktion leitet den Benutzer weiter zur Methodenübersicht
 */
function method_overview_back_to_method_overview()
{
    drupal_goto('/methoden_uebersicht');
}

/*
* Diese Funktion liest alle Elemente des Formulares aus und speichert sie in die Datenbank. Sollte diese Methode
* bereits in der Datenbank vorhanden sein, wird der Eintrag aktualisiert.
 */
function method_overview_update_method_execution_from_method_overview($form, &$form_state)
{
    //Die ID der Methode
    $method_id = arg(1);

    $rating = $form_state['values']['rating_star'];
    $method = $form_state['values']['choose_method'];
    $phase = $form_state['values']['choose_phase'];
    $room = $form_state['values']['choose_room'];
    $goal = $form_state['values']['goal'];
    $execution = $form_state['values']['execution'];
    $conclusion = $form_state['values']['rating'];
    $reason = $form_state['values']['reason'];
    $raum_end = $form_state['values']['select_raum_end'];
    $phase_end = $form_state['values']['select_phase_end'];

    //Methodendurchführung wird aktualisiert
    $sql = "UPDATE {method_execution} SET name = '$method', evaluation = '$conclusion', room = '$room', phase = '$phase', goal = '$goal', execution = '$execution', rating = '$rating', raum_end = '$raum_end', phase_end ='$phase_end', reason = '$reason' WHERE method_execution_id = '$method_id'";
    db_query($sql);

    //Hochgeladene Dateien werden gezählt
    $data = count($_FILES['files']['name']);

    //Es wird über alle neu hochgeladenen Dateien iteriert
    for ($i = 0; $i < $data; $i++) {

        //Datei wird für die Speicherung vorbereitet
        $file = file_save_upload($i, array(
            'file_validate_is_audio' => array(),
            //Es wird überprüft, ob die Datei eine gültige Dateiendung besitzt
            'file_validate_extensions' => array('png pdf jpg jpeg mp3 mp4'),
            'file_validate_size' => array(50 * 1024 * 1024),
        ));

        //Falls die Überprüfung erfolgreich war, wird die Datei gespeichert
        if ($file) {
            $file->status = FILE_STATUS_PERMANENT;
            if ($file = file_move($file, 'public://methods')) {
                $file->status = FILE_STATUS_PERMANENT;
                $form_state['values']['file'][$i] = $file;
                $path = substr($file->uri, 9);

                //Referenz der Datei wird in eine eigene Datenbanktabelle geschrieben
                $sql = "INSERT INTO {method_execution_data} (method_execution_id, path) VALUES($method_id, '$path')";
                db_query($sql);
            }
        }
    }

    drupal_set_message("Dokumentation zur Methode wurde geändert");
    drupal_goto('/methoden_uebersicht');
}

/*
 * Diese Funktion baut die dynamische Design-Thinking-Grafik. Als Übergabeparameter werden die nötigen Methoden und
 * der nötige vertikale Abstand der Punkte übergeben
 */
function method_overview_build_dynamic_graphic($method_elements, $y_wert)
{

    //Die beiden Hilfsvariablen dienen dazu, eine Verlinkung zwischen zwei Punkten zu erstellen
    $first_link_reference = -1;
    $second_link_reference = 0;

    //Diese Variable prüft bei jeder Methode, ob es sich umd eine Projektmanagement bzw. Vorbereitungsphase handelt
    //oder nicht
    $is_linkable_method = true;

    //Variable, die den vertikalen Abstand der Punkte beschreibt
    $y_space = $y_wert;

    //Dieses Array speichert Raum und Phase jeder Methode ab
    $method_room_phase = array();

    //Dieses Array speichert für jede Methode ab, ob es sich um eine Vorbereitungs- oder Projektmanagement-Methode
    //handelt oder nicht. Diese werden innerhalb der Grafik nicht angezeigt
    $validation = array();

    //Diese Variable enthält alle Methoden
    $method_array = $method_elements;

    /*
     * Für jede Methode werden Name von Raum und Phase ermittelt und zusätzlich geschaut, ob es sich um eine
     * Vorbereitungsmethode oder Projektmanagementmethode handelt. Diese werden nicht in der Grafik angezeigt.
     */
    foreach ($method_array as $method) {

        $validation["name"] = $method->raum_end . " " . $method->phase_end;

        if (!strcmp($method->room, "Vorbereitung") || !strcmp($method->room, "Projektmanagement")) {
            $validation["valid"] = 0;
        } else {
            $validation["valid"] = 1;
        }
        array_push($method_room_phase, $validation);
    }

    //In dieses Array werden die dynamischen Punkte zusammen mit deren Verlinkung gespeichert
    $dynamic_points = array();
    $dynamic_points['nodes'] = array();
    $dynamic_points['links'] = array();

    //Hilfsvariable, die die Durchläufe durch die Methoden zählt
    $counter = 0;

    //Diese Variable speichert den Verlauf der Methoden in Form von Zahlen ab. 1 == Problemraum divergent, 6 ==
    //Implementierungsraum konvergent
    $reference_array = array();

    //Feste x und y Werte für den ersten Punkt im divergenten Problemraum
    $y = 240;
    $x = 25;

    //Es wird über jede Methodendurchführung iteriert
    for ($i = 0; $i < sizeof($method_room_phase); $i++) {

        //Raum und Phase der Methode
        $name = $method_room_phase[$i]["name"];

        //Wenn es sich um keine Vorbereitungs- oder Projektmanagement-Methode handelt:
        if ($method_room_phase[$i]["valid"]) {
            switch ($name) {
                case 'Problemraum divergent':

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));

                        //Methode befindet sich in der ersten der sechs Prozessstufen
                        array_push($reference_array, "1");
                        $counter++;
                    } else {

                        //Wenn sich die vorige Methode in gleichem Raum bzw. gleicher Phase befindet...
                        if ($reference_array[$counter - 1] <= 1) {
                            $x = $x + 40;
                            if ($x > 185) {
                                $x = 25;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));

                            //Methode befindet sich in der ersten der sechs Prozessstufen
                            array_push($reference_array, "1");
                            $counter++;

                            //Sollte sich die vorige Methode in einem späteren Prozessschritt befunden haben, wird eine neue
                            //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                        } else {
                            $y = $y + $y_space;
                            $x = 25;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));

                            //Methode befindet sich in der ersten der sechs Prozessstufen
                            array_push($reference_array, "1");
                            $counter++;
                        }
                    }
                    break;

                case 'Problemraum konvergent':

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {
                        $x = 245;
                        $y = 240;

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));

                        //Methode befindet sich in der zweiten der sechs Prozessstufen
                        array_push($reference_array, "2");
                        $counter++;
                    } else {

                        //Sollte sich die vorige methode in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                        if ($reference_array[$counter - 1] < 2) {
                            $x = 245;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));

                            //Methode befindet sich in der zweiten der sechs Prozessstufen
                            array_push($reference_array, "2");
                            $counter++;

                            //Sollte sich die vorige Methode in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                            //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                        } else if ($reference_array[$counter - 1] == 2) {
                            $x = $x + 40;
                            if ($x > 405) {
                                $x = 245;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));

                            //Methode befindet sich in der zweiten der sechs Prozessstufen
                            array_push($reference_array, "2");
                            $counter++;

                            //Sollte sich die vorige Methode in einem späteren Prozessschritt befunden haben, wird eine neue
                            //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                        } else if ($reference_array[$counter - 1] > 2) {
                            $x = 245;
                            $y = $y + $y_space;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));

                            //Methode befindet sich in der zweiten der sechs Prozessstufen
                            array_push($reference_array, "2");
                            $counter++;
                        }
                    }
                    break;

                case 'Lösungsraum divergent':

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {
                        $x = 461;
                        $y = 240;

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));

                        //Methode befindet sich in der dritten der sechs Prozessstufen
                        array_push($reference_array, "3");
                        $counter++;
                    } else {

                        //Sollte sich die vorige Methode in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                        if ($reference_array[$counter - 1] < 3) {
                            $x = 461;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));

                            //Methode befindet sich in der dritten der sechs Prozessstufen
                            array_push($reference_array, "3");
                            $counter++;

                            //Sollte sich die vorige Methode in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                            //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                        } else if ($reference_array[$counter - 1] == 3) {
                            $x = $x + 40;
                            if ($x > 622) {
                                $x = 461;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));

                            //Methode befindet sich in der dritten der sechs Prozessstufen
                            array_push($reference_array, "3");
                            $counter++;

                            //Sollte sich die vorige Methode in einem späteren Prozessschritt befunden haben, wird eine neue
                            //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                        } else if ($reference_array[$counter - 1] > 3) {
                            $x = 461;
                            $y = $y + $y_space;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));

                            //Methode befindet sich in der dritten der sechs Prozessstufen
                            array_push($reference_array, "3");
                            $counter++;
                        }
                    }
                    break;

                case "Lösungsraum konvergent":

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {
                        $x = 677;
                        $y = 240;

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));

                        //Methode befindet sich in der vierten der sechs Prozessstufen
                        array_push($reference_array, "4");
                        $counter++;
                    } else {

                        //Sollte sich die vorige Methode in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                        if ($reference_array[$counter - 1] < 4) {
                            $x = 677;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));

                            //Methode befindet sich in der vierten der sechs Prozessstufen
                            array_push($reference_array, "4");
                            $counter++;

                            //Sollte sich die vorige Methode in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                            //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                        } else if ($reference_array[$counter - 1] == 4) {
                            $x = $x + 40;
                            if ($x > 854) {
                                $x = 677;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));

                            //Methode befindet sich in der vierten der sechs Prozessstufen
                            array_push($reference_array, "4");
                            $counter++;

                            //Sollte sich die vorige Methode in einem späteren Prozessschritt befunden haben, wird eine neue
                            //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                        } else if ($reference_array[$counter - 1] > 4) {
                            $x = 677;
                            $y = $y + $y_space;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));

                            //Methode befindet sich in der vierten der sechs Prozessstufen
                            array_push($reference_array, "4");
                            $counter++;
                        }
                    }
                    break;

                case "Implementierungsraum divergent":

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {
                        $x = 891;
                        $y = 240;

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));

                        //Methode befindet sich in der fünften der sechs Prozessstufen
                        array_push($reference_array, "5");
                        $counter++;
                    } else {

                        //Sollte sich die vorige Methode in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                        if ($reference_array[$counter - 1] < 5) {
                            $x = 891;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));

                            //Methode befindet sich in der fünften der sechs Prozessstufen
                            array_push($reference_array, "5");
                            $counter++;

                            //Sollte sich die vorige methode in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                            //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                        } else if ($reference_array[$counter - 1] == 5) {
                            $x = $x + 40;
                            if ($x > 1051) {
                                $x = 891;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));

                            //Methode befindet sich in der fünften der sechs Prozessstufen
                            array_push($reference_array, "5");
                            $counter++;

                            //Sollte sich die vorige Methode in einem späteren Prozessschritt befunden haben, wird eine neue
                            //Reihe eröffnet, also der y-Wert und x-Wert angepasst
                        } else if ($reference_array[$counter - 1] > 5) {
                            $x = 891;
                            $y = $y + $y_space;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));

                            //Methode befindet sich in der fünften der sechs Prozessstufen
                            array_push($reference_array, "5");
                            $counter++;
                        }
                    }
                    break;

                case "Implementierungsraum konvergent":

                    //Sollte es der erste Punkt der Grafik sein:
                    if ($counter == 0) {
                        $x = 1111;
                        $y = 240;

                        //Der erste Punkt wird in das zugehörige Array gespeichert
                        array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));

                        //Methode befindet sich in der sechsten der sechs Prozessstufen
                        array_push($reference_array, "6");
                        $counter++;

                    } else {

                        //Sollte sich die vorige Methode in einem früheren Prozessschritt befinden, bleibt der y-Wert gleich
                        if ($reference_array[$counter - 1] < 6) {
                            $x = 1111;
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));

                            //Methode befindet sich in der sechsten der sechs Prozessstufen
                            array_push($reference_array, "6");
                            $counter++;

                            //Sollte sich die vorige Methode in demselben Prozessschritt befinden, bleibt der y-Wert gleich, sofern
                            //sofern noch keine fünf Punkte in einer Reihe vorhanden sind.
                        } else if ($reference_array[$counter - 1] == 6) {
                            $x = $x + 40;
                            if ($x > 1271) {
                                $x = 1111;
                                $y = $y + $y_space;
                            }
                            array_push($dynamic_points['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));

                            //Methode befindet sich in der sechsten der sechs Prozessstufen
                            array_push($reference_array, "6");
                            $counter++;
                        }
                    }
                    break;
            }

        } else {
            $is_linkable_method = false;

        }

        //Wenn es mindestens der zweite Durchlauf der Schleife ist
        if ($i > 0) {

            //Wenn es sich um eine Methode handelt, die angezeigt werden soll:
            if ($is_linkable_method) {
                $first_link_reference++;
                $second_link_reference++;

                //Verbindung der beiden Punkte wird ins Array gespeichert
                array_push($dynamic_points['links'], array('source' => $first_link_reference, 'target' => $second_link_reference));
            } else {

                //Wenn es eine andere Methode ist, wird diese übersprungen
                if ($first_link_reference >= 0) {
                    array_push($dynamic_points['links'], array('source' => $first_link_reference, 'target' => $second_link_reference));
                }
                $is_linkable_method = true;
            }
        }
    }

    //Grafik wird erstellt
    $chart = array(
        'id' => 'visualization',
        'type' => 'gantt',
        'data' => ($dynamic_points),
    );

    $d3_chart = d3_draw($chart);

    return $d3_chart;
}

/*
 * Diese Funktion lädt ein Protokoll-Element anhand der Protokoll-ID aus der Datenbank. Die ID wird der Funktion
 * als Parameter übergeben
 */
function method_overview_get_protocol_element_by_id($protocol_id)
{
    //In diese Variable wird das Protokoll-Element gespeichert
    $protocol_string = "";

    //Das betreffende Protokoll-Element wird aus der Datenbank geladen
    $sql = "SELECT * FROM {protocol} WHERE protocol_id = " . $protocol_id;
    $protocol_result = db_query($sql);

    foreach ($protocol_result as $protocol) {
        $protocol_string = $protocol;
    }
    return $protocol_string;
}